{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marcelo/Documentos/Codigos/NextLevelWeek/moveit-next/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === 'granted') {}\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/marcelo/Documentos/Codigos/NextLevelWeek/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","permission","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AAErE,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAAsBP,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAAA,OAAEQ,iBAAF;AAAA,OAAqBC;AAArB,MAA8CT,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM;AAAA,OAAEU,mBAAF;AAAA,OAAuBC;AAAvB,MAAkDX,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM;AAAA,OAAEY,eAAF;AAAA,OAAmBC;AAAnB,MAA0Cb,QAAQ,CAAC,IAAD,CAAxD;AAEA,QAAMc,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAe,CAAxB,EAA2B,CAA3B,CAA9B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAkB;AACdZ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAEH,WAASc,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAAEmB,oBAAF,CAA5B;AAEAR,IAAAA,kBAAkB,CAAEY,SAAF,CAAlB;;AAEA,QAAGR,YAAY,CAACS,UAAb,KAA4B,SAA/B,EAAyC,CAExC;AACJ;;AAED,WAASC,cAAT,GAAyB;AACrBd,IAAAA,kBAAkB,CAAE,IAAF,CAAlB;AACH;;AAED,WAASe,iBAAT,GAA4B;AACxB,QAAG,CAAChB,eAAJ,EAAoB;AAChB;AACH;;AAED,UAAM;AAAEiB,MAAAA;AAAF,QAAajB,eAAnB;AAEA,QAAIkB,eAAe,GAAGtB,iBAAiB,GAAGqB,MAA1C;;AAEA,QAAIC,eAAe,IAAIhB,qBAAvB,EAA8C;AAC1CgB,MAAAA,eAAe,GAAGA,eAAe,GAAGhB,qBAApC;AACAK,MAAAA,OAAO;AACV;;AAEDV,IAAAA,oBAAoB,CAAEqB,eAAF,CAApB;AACAjB,IAAAA,kBAAkB,CAAE,IAAF,CAAlB;AACAF,IAAAA,sBAAsB,CAAED,mBAAmB,GAAG,CAAxB,CAAtB;AACH;;AAGD,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAI;AACLJ,MAAAA,KADK;AAELE,MAAAA,iBAFK;AAGLE,MAAAA,mBAHK;AAILS,MAAAA,OAJK;AAKLC,MAAAA,iBALK;AAMLR,MAAAA,eANK;AAOLe,MAAAA,cAPK;AAQLb,MAAAA,qBARK;AASLc,MAAAA;AATK,KADb;AAAA,cAaKvB;AAbL;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n}\n\ninterface ChallengesContextData{\n    level: number;\n    currentExperience: number;\n    experienceToNextLevel: number;\n    challengesCompleted: number;\n    activeChallenge: Challenge;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    resetChallenge: () => void;\n    completeChallenge: () => void;   \n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps){\n\n    const [ level, setLevel ] = useState(1);\n    const [ currentExperience, setCurrentExperience ] = useState(0);\n    const [ challengesCompleted, setChallengesCompleted ] = useState(0);\n    const [ activeChallenge, setActiveChallenge ] = useState(null);\n\n    const experienceToNextLevel = Math.pow((level + 1 ) * 4 ,2);\n\n    useEffect(() => {\n        Notification.requestPermission();\n    }, []);\n\n    function levelUp(){   \n        setLevel(level + 1);\n      }\n\n    function startNewChallenge(){\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n        const challenge = challenges[ randomChallengeIndex ];\n\n        setActiveChallenge( challenge );\n\n        if(Notification.permission === 'granted'){\n            \n        }\n    }  \n\n    function resetChallenge(){\n        setActiveChallenge( null );\n    }\n\n    function completeChallenge(){\n        if(!activeChallenge){\n            return;\n        }\n\n        const { amount } = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if( finalExperience >= experienceToNextLevel ){\n            finalExperience = finalExperience - experienceToNextLevel;\n            levelUp();\n        }\n\n        setCurrentExperience( finalExperience );\n        setActiveChallenge( null );\n        setChallengesCompleted( challengesCompleted + 1 );\n    }\n\n\n    return(\n        <ChallengesContext.Provider \n            value = {{\n                level,\n                currentExperience,\n                challengesCompleted,\n                levelUp,\n                startNewChallenge,\n                activeChallenge,\n                resetChallenge,\n                experienceToNextLevel,\n                completeChallenge\n            }}\n        >\n            {children}\n        </ChallengesContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}