{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marcelo/Documentos/Codigos/NextLevelWeek/moveit-next/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/marcelo/Documentos/Codigos/NextLevelWeek/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AAErE,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAAsBN,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAAA,OAAEO,iBAAF;AAAA,OAAqBC;AAArB,MAA8CR,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM;AAAA,OAAES,mBAAF;AAAA,OAAuBC;AAAvB,MAAkDV,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM;AAAA,OAAEW,eAAF;AAAA,OAAmBC;AAAnB,MAA0CZ,QAAQ,CAAC,IAAD,CAAxD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAe,CAAxB,EAA2B,CAA3B,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AAEdV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAEH,WAASY,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAAyB;AACrBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxB,QAAG,CAACb,eAAJ,EAAoB;AAChB;AACH;;AAED,UAAM;AAAEc,MAAAA;AAAF,QAAad,eAAnB;AAEA,QAAIe,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C;;AAEA,QAAIC,eAAe,IAAIb,qBAAvB,EAA8C;AAC1Ca,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,oBAAoB,CAAEkB,eAAF,CAApB;AACAd,IAAAA,kBAAkB,CAAE,IAAF,CAAlB;AACAF,IAAAA,sBAAsB,CAAED,mBAAmB,GAAG,CAAxB,CAAtB;AACH;;AAGD,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAI;AACLJ,MAAAA,KADK;AAELE,MAAAA,iBAFK;AAGLE,MAAAA,mBAHK;AAILO,MAAAA,OAJK;AAKLC,MAAAA,iBALK;AAMLN,MAAAA,eANK;AAOLY,MAAAA,cAPK;AAQLV,MAAAA,qBARK;AASLW,MAAAA;AATK,KADb;AAAA,cAaKpB;AAbL;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n\n}\ninterface ChallengesContextData{\n    level: number;\n    currentExperience: number;\n    experienceToNextLevel: number;\n    challengesCompleted: number;\n    activeChallenge: Challenge;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    resetChallenge: () => void;\n    completeChallenge: () => void;\n    \n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps){\n\n    const [ level, setLevel ] = useState(1);\n    const [ currentExperience, setCurrentExperience ] = useState(0);\n    const [ challengesCompleted, setChallengesCompleted ] = useState(0);\n    const [ activeChallenge, setActiveChallenge ] = useState(null);\n\n    const experienceToNextLevel = Math.pow((level + 1 ) * 4 ,2);\n\n    function levelUp(){\n        \n        setLevel(level + 1);\n      }\n\n    function startNewChallenge(){\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge);\n    }  \n\n    function resetChallenge(){\n        setActiveChallenge(null);\n    }\n\n    function completeChallenge(){\n        if(!activeChallenge){\n            return;\n        }\n\n        const { amount } = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if( finalExperience >= experienceToNextLevel ){\n            finalExperience = finalExperience - experienceToNextLevel;\n            levelUp();\n        }\n\n        setCurrentExperience( finalExperience );\n        setActiveChallenge( null );\n        setChallengesCompleted( challengesCompleted + 1 );\n    }\n\n\n    return(\n        <ChallengesContext.Provider \n            value = {{\n                level,\n                currentExperience,\n                challengesCompleted,\n                levelUp,\n                startNewChallenge,\n                activeChallenge,\n                resetChallenge,\n                experienceToNextLevel,\n                completeChallenge\n            }}\n        >\n            {children}\n        </ChallengesContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}