{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/marcelo/Documentos/Codigos/NextLevelWeek/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\ninterface;\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"IDVxXaKVFd+/4zWgrdFssD4qVSE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/marcelo/Documentos/Codigos/NextLevelWeek/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","interface","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEAC,SAAS;AAcT,OAAO,IAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASK,kBAAT,OAAkE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAE3CL,QAAQ,CAAC,CAAD,CAFmC;AAAA,MAE9DM,KAF8D;AAAA,MAEvDC,QAFuD;;AAAA,mBAGnBP,QAAQ,CAAC,CAAD,CAHW;AAAA,MAG9DQ,iBAH8D;AAAA,MAG3CC,oBAH2C;;AAAA,mBAIfT,QAAQ,CAAC,CAAD,CAJO;AAAA,MAI9DU,mBAJ8D;AAAA,MAIzCC,sBAJyC;;AAAA,mBAKvBX,QAAQ,CAAC,IAAD,CALe;AAAA,MAK9DY,eAL8D;AAAA,MAK7CC,kBAL6C;;AASrE,WAASC,OAAT,GAAkB;AAEdP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAEH,WAASS,iBAAT,GAA4B;AACxB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBlB,UAAU,CAACmB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGpB,UAAU,CAACe,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAI;AACLf,MAAAA,KAAK,EAALA,KADK;AAELE,MAAAA,iBAAiB,EAAjBA,iBAFK;AAGLE,MAAAA,mBAAmB,EAAnBA,mBAHK;AAILI,MAAAA,OAAO,EAAPA,OAJK;AAKLC,MAAAA,iBAAiB,EAAjBA,iBALK;AAMLH,MAAAA,eAAe,EAAfA;AANK,KADb;AAAA,cAWKP;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GApCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface\ninterface ChallengesContextData{\n    level: number;\n    currentExperience: number;\n    challengesCompleted: number;\n    activeChallenge: object;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps){\n\n    const [level, setLevel] = useState(1);\n    const [currentExperience, setCurrentExperience] = useState(0);\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\n    const [activeChallenge, setActiveChallenge] = useState(null);\n\n\n\n    function levelUp(){\n        \n        setLevel(level + 1);\n      }\n\n    function startNewChallenge(){\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge);\n    }  \n\n    return(\n        <ChallengesContext.Provider \n            value = {{\n                level,\n                currentExperience,\n                challengesCompleted,\n                levelUp,\n                startNewChallenge,\n                activeChallenge,\n\n            }}\n        >\n            {children}\n        </ChallengesContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}