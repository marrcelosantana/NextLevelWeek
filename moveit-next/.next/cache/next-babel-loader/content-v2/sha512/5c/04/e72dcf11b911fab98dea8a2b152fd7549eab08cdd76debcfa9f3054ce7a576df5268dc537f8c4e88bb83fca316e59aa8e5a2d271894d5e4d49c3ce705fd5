{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marcelo/Documentos/Codigos/NextLevelWeek/moveit-next/src/contexts/ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState(rest.level);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio!', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/marcelo/Documentos/Codigos/NextLevelWeek/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\n\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n}\n\ninterface ChallengesContextData{\n    level: number;\n    currentExperience: number;\n    experienceToNextLevel: number;\n    challengesCompleted: number;\n    activeChallenge: Challenge;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    resetChallenge: () => void;\n    completeChallenge: () => void;   \n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n    level: number;\n    currentExperience: number;\n    challengesCompleted: number;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider({ children, ...rest }: ChallengesProviderProps){\n\n    const [ level, setLevel ] = useState(rest.level);\n    const [ currentExperience, setCurrentExperience ] = useState(0);\n    const [ challengesCompleted, setChallengesCompleted ] = useState(0);\n    const [ activeChallenge, setActiveChallenge ] = useState(null);\n\n    const experienceToNextLevel = Math.pow((level + 1 ) * 4 ,2);\n\n    useEffect(() => {\n        Notification.requestPermission();\n    }, []);\n\n    useEffect(() => {\n        Cookies.set('level', String(level));\n        Cookies.set('currentExperience', String(currentExperience));\n        Cookies.set('challengesCompleted', String(challengesCompleted));\n    }, [level, currentExperience, challengesCompleted]);\n\n    function levelUp(){   \n        setLevel(level + 1);\n      }\n\n    function startNewChallenge(){\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n        const challenge = challenges[ randomChallengeIndex ];\n\n        setActiveChallenge( challenge );\n\n        new Audio('/notification.mp3').play();\n\n        if(Notification.permission === 'granted'){\n            new Notification('Novo desafio!',{\n                body: `Valendo ${ challenge.amount }xp!`\n            })\n        }\n    }  \n\n    function resetChallenge(){\n        setActiveChallenge( null );\n    }\n\n    function completeChallenge(){\n        if(!activeChallenge){\n            return;\n        }\n\n        const { amount } = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if( finalExperience >= experienceToNextLevel ){\n            finalExperience = finalExperience - experienceToNextLevel;\n            levelUp();\n        }\n\n        setCurrentExperience( finalExperience );\n        setActiveChallenge( null );\n        setChallengesCompleted( challengesCompleted + 1 );\n    }\n\n\n    return(\n        <ChallengesContext.Provider \n            value = {{\n                level,\n                currentExperience,\n                challengesCompleted,\n                levelUp,\n                startNewChallenge,\n                activeChallenge,\n                resetChallenge,\n                experienceToNextLevel,\n                completeChallenge\n            }}\n        >\n            {children}\n        </ChallengesContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}